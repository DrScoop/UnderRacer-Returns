<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_jumppad</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Place this code in the create event of your 3d object
// To play your animation set playnanim variable to true
// Specify here each background or sprite index to be used as textures (don't use background_get_texture() or sprite_get_texture())
tex_shape_1 = tex_jumppad;
tex_shape_2 = tex_jumppad_bluefx;
tex_shape_3 = tex_jumppad_orangefx;

version   =  1.68; // 3d Animator version
z         = 0;     // z position (elevation) of your animation
playanim  = true; // to play: make this variable true
loopanim  = true; // loop animation or not
playdir   = 1;     // play direction: 1 = forward, -1 = backward
playbf    = false; // play back and forth or not
animspeed = 0.50;     // speed animation which you've specified
maxframe  = 9;    // maximum frame-1 which you've set
frame     = 0;     // frame counter
maxshape  = 3;     // number of shapes-1
// shape all
shapes[0,0] = 0;
shapes[0,1] = 0;
shapes[0,2] = "all";
shapes[0,3] = 0;
shapes[0,4] = "";
shapes[0,5] = -1;
shapes[0,6] = 0;
shapes[0,7] = 0;
shapes[0,8] = 0;
shapes[0,9] = 0;
shapes[0,10] = 0;
shapes[0,11] = 0;
shapes[0,13] = 0;
shapes[0,14] = 1;
shapes[0,15] = 1;
// time array for shape all
shapes[0,16] = 0;
shapes[0,17] = 16777215;
shapes[0,18] = 1;
shapes[0,19] = 0;
shapes[0,20] = 0;
shapes[0,21] = 0;
shapes[0,22] = 1;
shapes[0,23] = 1;
shapes[0,24] = 1;
shapes[0,25] = 0;
shapes[0,26] = 0;
shapes[0,27] = 0;
shapes[0,28] = 0;
shapes[0,29] = 0;
shapes[0,30] = 0;
shapes[0,31] = 0;
// shape shape 1
shapes[1,0] = 1;
shapes[1,1] = 1;
shapes[1,2] = "shape 1";
shapes[1,3] = 0;
shapes[1,4] = "textures\wood1.bmp";
shapes[1,5] = tex_shape_1;
shapes[1,6] = 1;
shapes[1,7] = 24;
shapes[1,8] = 0;
shapes[1,9] = 0;
shapes[1,10] = 0;
shapes[1,11] = 0;
shapes[1,13] = 0;
shapes[1,14] = 1;
shapes[1,15] = 1;
// time array for shape shape 1
shapes[1,16] = 0;
shapes[1,17] = 16777215;
shapes[1,18] = 1;
shapes[1,19] = 0;
shapes[1,20] = 0;
shapes[1,21] = -15.90;
shapes[1,22] = 32;
shapes[1,23] = 0;
shapes[1,24] = 32;
shapes[1,25] = 0;
shapes[1,26] = 0;
shapes[1,27] = 0;
shapes[1,28] = 0;
shapes[1,29] = 90;
shapes[1,30] = 0;
shapes[1,31] = 0;
// shape shape 2
shapes[2,0] = 3;
shapes[2,1] = 1;
shapes[2,2] = "shape 2";
shapes[2,3] = 0;
shapes[2,4] = "";
shapes[2,5] = tex_shape_2;
shapes[2,6] = 1;
shapes[2,7] = 24;
shapes[2,8] = 3;
shapes[2,9] = 0;
shapes[2,10] = 0;
shapes[2,11] = 0;
shapes[2,13] = 0;
shapes[2,14] = 1;
shapes[2,15] = 1;
// time array for shape shape 2
shapes[2,16] = 0;
shapes[2,17] = 16777215;
shapes[2,18] = 0;
shapes[2,19] = 0;
shapes[2,20] = 0;
shapes[2,21] = -11.80;
shapes[2,22] = 24;
shapes[2,23] = 0;
shapes[2,24] = 24;
shapes[2,25] = 0;
shapes[2,26] = 0;
shapes[2,27] = 0;
shapes[2,28] = 0;
shapes[2,29] = 90;
shapes[2,30] = 0;
shapes[2,31] = 0;
shapes[2,32] = 4;
shapes[2,33] = 16777215;
shapes[2,34] = 1;
shapes[2,35] = 0;
shapes[2,36] = 0;
shapes[2,37] = -11;
shapes[2,38] = 24;
shapes[2,39] = 0;
shapes[2,40] = 24;
shapes[2,41] = 0;
shapes[2,42] = 0;
shapes[2,43] = 160;
shapes[2,44] = 0;
shapes[2,45] = 90;
shapes[2,46] = 0;
shapes[2,47] = 0;
shapes[2,48] = 5;
shapes[2,49] = 16777215;
shapes[2,50] = 1;
shapes[2,51] = 0;
shapes[2,52] = 0;
shapes[2,53] = -10.80;
shapes[2,54] = 24;
shapes[2,55] = 0;
shapes[2,56] = 24;
shapes[2,57] = 0;
shapes[2,58] = 0;
shapes[2,59] = 200;
shapes[2,60] = 0;
shapes[2,61] = 90;
shapes[2,62] = 0;
shapes[2,63] = 0;
shapes[2,64] = 9;
shapes[2,65] = 16777215;
shapes[2,66] = 0;
shapes[2,67] = 0;
shapes[2,68] = 0;
shapes[2,69] = -10;
shapes[2,70] = 24;
shapes[2,71] = 0;
shapes[2,72] = 24;
shapes[2,73] = 0;
shapes[2,74] = 0;
shapes[2,75] = 360;
shapes[2,76] = 0;
shapes[2,77] = 90;
shapes[2,78] = 0;
shapes[2,79] = 0;
// shape shape 3
shapes[3,0] = 4;
shapes[3,1] = 1;
shapes[3,2] = "shape 3";
shapes[3,3] = 0;
shapes[3,4] = "";
shapes[3,5] = tex_shape_3;
shapes[3,6] = 1;
shapes[3,7] = 24;
shapes[3,8] = 3;
shapes[3,9] = 0;
shapes[3,10] = 0;
shapes[3,11] = 0;
shapes[3,13] = 0;
shapes[3,14] = 1;
shapes[3,15] = 1;
// time array for shape shape 3
shapes[3,16] = 0;
shapes[3,17] = 16777215;
shapes[3,18] = 1;
shapes[3,19] = 0;
shapes[3,20] = 0;
shapes[3,21] = -10;
shapes[3,22] = 24;
shapes[3,23] = 0;
shapes[3,24] = 24;
shapes[3,25] = 0;
shapes[3,26] = 0;
shapes[3,27] = 0;
shapes[3,28] = 0;
shapes[3,29] = 90;
shapes[3,30] = 0;
shapes[3,31] = 0;
shapes[3,32] = 4;
shapes[3,33] = 16777215;
shapes[3,34] = 0;
shapes[3,35] = 0;
shapes[3,36] = 0;
shapes[3,37] = -10.80;
shapes[3,38] = 24;
shapes[3,39] = 0;
shapes[3,40] = 24;
shapes[3,41] = 0;
shapes[3,42] = 0;
shapes[3,43] = -160;
shapes[3,44] = 0;
shapes[3,45] = 90;
shapes[3,46] = 0;
shapes[3,47] = 0;
shapes[3,48] = 5;
shapes[3,49] = 16777215;
shapes[3,50] = 0;
shapes[3,51] = 0;
shapes[3,52] = 0;
shapes[3,53] = -11;
shapes[3,54] = 24;
shapes[3,55] = 0;
shapes[3,56] = 24;
shapes[3,57] = 0;
shapes[3,58] = 0;
shapes[3,59] = -200;
shapes[3,60] = 0;
shapes[3,61] = 90;
shapes[3,62] = 0;
shapes[3,63] = 0;
shapes[3,64] = 9;
shapes[3,65] = 16777215;
shapes[3,66] = 1;
shapes[3,67] = 0;
shapes[3,68] = 0;
shapes[3,69] = -11.80;
shapes[3,70] = 24;
shapes[3,71] = 0;
shapes[3,72] = 24;
shapes[3,73] = 0;
shapes[3,74] = 0;
shapes[3,75] = -360;
shapes[3,76] = 0;
shapes[3,77] = 90;
shapes[3,78] = 0;
shapes[3,79] = 0;
// end create event code
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_current=0) {
if distance_to_object(obj_cam1) &gt; global.renderdistance exit{
// Place this code in the step event of your 3d object
if playdir == 1
{
  if loopanim
  {
    if playanim
    {
      if frame == maxframe
      {
        if playbf playdir = -1;
        else frame = 0;
      }
      else frame = min(maxframe,frame+animspeed);
    }
  }
  else
  {
    if playanim frame = min(maxframe,frame+animspeed);
    if frame == maxframe
    {
      if playbf playdir = -1;
      else playanim = false;
    }
  }
}
else
{
  if loopanim
  {
    if playanim
    {
      if frame == 0
      {
        if playbf playdir = 1;
        else frame = maxframe;
      }
      else frame = max(0,frame-animspeed);
    }
  }
  else
  {
    if playanim frame = max(0,frame-animspeed);
    if frame == 0 
    {
      if playbf playdir = 1;
      playanim = false;
    }
  }
}
// end step event code
}}

if global.players&gt;1{
if (view_current=1) {
if distance_to_object(obj_cam2) &gt; global.renderdistance exit{
// Place this code in the step event of your 3d object
if playdir == 1
{
  if loopanim
  {
    if playanim
    {
      if frame == maxframe
      {
        if playbf playdir = -1;
        else frame = 0;
      }
      else frame = min(maxframe,frame+animspeed);
    }
  }
  else
  {
    if playanim frame = min(maxframe,frame+animspeed);
    if frame == maxframe
    {
      if playbf playdir = -1;
      else playanim = false;
    }
  }
}
else
{
  if loopanim
  {
    if playanim
    {
      if frame == 0
      {
        if playbf playdir = 1;
        else frame = maxframe;
      }
      else frame = max(0,frame-animspeed);
    }
  }
  else
  {
    if playanim frame = max(0,frame-animspeed);
    if frame == 0 
    {
      if playbf playdir = 1;
      playanim = false;
    }
  }
}
}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_kart_basic">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.z&lt;2{
other.z=2.1
other.zspeed=3.5
sound_2play(snd_jumppad)
other.speed+=10
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_current=0) {
if distance_to_object(obj_cam1) &gt; global.renderdistance exit{
// Place this code in the draw event of your 3d object
var curcolor,curalpha,name,time,factor,frameprev,framenext,valueprev,shape,tex,alpha,zpos,xwidth,ywidth,zwidth,zangle,xrotate;
curcolor = draw_get_color();
curalpha = draw_get_alpha();
for (shape=1;shape&lt;=maxshape;shape+=1) if !shapes[shape,3]
{
  tex = -1;
  if shapes[shape,5] != -1
  {
    if shapes[shape,9] == 0 tex = background_get_texture(shapes[shape,5]);
    else tex = sprite_get_texture(shapes[shape,5],floor((frame mod shapes[shape,10])*sprite_get_number(shapes[shape,5])/shapes[shape,10]));
  }
  else if shapes[0,5] != -1
  {
    if shapes[0,9] == 0 tex = background_get_texture(shapes[0,5]);
    else tex = sprite_get_texture(shapes[0,5],floor((frame mod shapes[0,10])*sprite_get_number(shapes[0,5])/shapes[0,10]));
  }
  name = 'T'+string(shapes[shape,0]);
  for (time=0;time&lt;=shapes[shape,8];time+=1)
  {
    framenext = shapes[shape,16+(16*time)];
    if framenext &gt; frame
    {
      frameprev = shapes[shape,16+(16*(time-1))];
      factor = (frame-frameprev)/(framenext-frameprev);
      valueprev = shapes[shape,18+(16*(time-1))];
      alpha = valueprev+factor*(shapes[shape,18+(16*time)]-valueprev);
      valueprev = shapes[shape,21+(16*(time-1))];
      zpos = valueprev+factor*(shapes[shape,21+(16*time)]-valueprev);
      valueprev = shapes[shape,22+(16*(time-1))];
      xwidth = 0.5*(valueprev+factor*(shapes[shape,22+(16*time)]-valueprev));
      valueprev = shapes[shape,23+(16*(time-1))];
      ywidth = 0.5*(valueprev+factor*(shapes[shape,23+(16*time)]-valueprev));
      valueprev = shapes[shape,24+(16*(time-1))];
      zwidth = valueprev+factor*(shapes[shape,24+(16*time)]-valueprev);
      valueprev = shapes[shape,27+(16*(time-1))];
      zangle = valueprev+factor*(shapes[shape,27+(16*time)]-valueprev);
      valueprev = shapes[shape,29+(16*(time-1))];
      xrotate = valueprev+factor*(shapes[shape,29+(16*time)]-valueprev);
      break;
    }
    if framenext == frame
    {
      alpha = shapes[shape,18+(16*time)];
      zpos = shapes[shape,21+(16*time)];
      xwidth = 0.5*shapes[shape,22+(16*time)];
      ywidth = 0.5*shapes[shape,23+(16*time)];
      zwidth = shapes[shape,24+(16*time)];
      zangle = shapes[shape,27+(16*time)];
      xrotate = shapes[shape,29+(16*time)];
      break;
    }
  }
  if time == shapes[shape,8]+1
  {
    alpha = shapes[shape,18+(16*(time-1))];
    zpos = shapes[shape,21+(16*(time-1))];
    xwidth = 0.5*shapes[shape,22+(16*(time-1))];
    ywidth = 0.5*shapes[shape,23+(16*(time-1))];
    zwidth = shapes[shape,24+(16*(time-1))];
    zangle = shapes[shape,27+(16*(time-1))];
    xrotate = shapes[shape,29+(16*(time-1))];
  }
  draw_set_color(c_white);
  draw_set_alpha(alpha);
  d3d_transform_set_identity();
  d3d_transform_add_translation(0,0,-zwidth/2);
  d3d_transform_add_rotation_x(xrotate);
  d3d_transform_add_translation(0,0,zwidth/2);
  d3d_transform_add_rotation_z(zangle);
  d3d_transform_add_translation(0,0,zpos);
  d3d_transform_add_rotation_z(direction);
  d3d_transform_add_translation(x,y,z);
  switch (shapes[shape,1])
  {
    case 1: d3d_draw_wall(-xwidth,0,zwidth,xwidth,0,0,tex,shapes[shape,14],shapes[shape,15]); break;
    case 2: d3d_primitive_begin_texture(pr_trianglelist,tex);
            d3d_vertex_normal_texture(0,0,zwidth,0,1,0,0.5*shapes[shape,14],0);
            d3d_vertex_normal_texture(-xwidth,0,0,0,1,0,0,shapes[shape,15]);
            d3d_vertex_normal_texture(xwidth,0,0,0,1,0,shapes[shape,14],shapes[shape,15]);
            d3d_primitive_end(); break;
    case 3: d3d_draw_block(-xwidth,-ywidth,zwidth,xwidth,ywidth,0,tex,shapes[shape,14],shapes[shape,15]); break;
    case 4: d3d_draw_cylinder(-xwidth,-ywidth,zwidth,xwidth,ywidth,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,6],shapes[shape,7]); break;
    case 5: d3d_draw_ellipsoid(-xwidth,-ywidth,zwidth,xwidth,ywidth,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,7]); break;
    case 6: d3d_draw_cone(-xwidth,-ywidth,zwidth,xwidth,ywidth,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,6],shapes[shape,7]); break;
  }
  d3d_transform_set_identity();
}
draw_set_color(curcolor);
draw_set_alpha(curalpha);
// end draw event code
}}

if global.players&gt;1{
if (view_current=1) {
if distance_to_object(obj_cam2) &gt; global.renderdistance exit{
// Place this code in the draw event of your 3d object
var curcolor,curalpha,name,time,factor,frameprev,framenext,valueprev,shape,tex,alpha,zpos,xwidth,ywidth,zwidth,zangle,xrotate;
curcolor = draw_get_color();
curalpha = draw_get_alpha();
for (shape=1;shape&lt;=maxshape;shape+=1) if !shapes[shape,3]
{
  tex = -1;
  if shapes[shape,5] != -1
  {
    if shapes[shape,9] == 0 tex = background_get_texture(shapes[shape,5]);
    else tex = sprite_get_texture(shapes[shape,5],floor((frame mod shapes[shape,10])*sprite_get_number(shapes[shape,5])/shapes[shape,10]));
  }
  else if shapes[0,5] != -1
  {
    if shapes[0,9] == 0 tex = background_get_texture(shapes[0,5]);
    else tex = sprite_get_texture(shapes[0,5],floor((frame mod shapes[0,10])*sprite_get_number(shapes[0,5])/shapes[0,10]));
  }
  name = 'T'+string(shapes[shape,0]);
  for (time=0;time&lt;=shapes[shape,8];time+=1)
  {
    framenext = shapes[shape,16+(16*time)];
    if framenext &gt; frame
    {
      frameprev = shapes[shape,16+(16*(time-1))];
      factor = (frame-frameprev)/(framenext-frameprev);
      valueprev = shapes[shape,18+(16*(time-1))];
      alpha = valueprev+factor*(shapes[shape,18+(16*time)]-valueprev);
      valueprev = shapes[shape,21+(16*(time-1))];
      zpos = valueprev+factor*(shapes[shape,21+(16*time)]-valueprev);
      valueprev = shapes[shape,22+(16*(time-1))];
      xwidth = 0.5*(valueprev+factor*(shapes[shape,22+(16*time)]-valueprev));
      valueprev = shapes[shape,23+(16*(time-1))];
      ywidth = 0.5*(valueprev+factor*(shapes[shape,23+(16*time)]-valueprev));
      valueprev = shapes[shape,24+(16*(time-1))];
      zwidth = valueprev+factor*(shapes[shape,24+(16*time)]-valueprev);
      valueprev = shapes[shape,27+(16*(time-1))];
      zangle = valueprev+factor*(shapes[shape,27+(16*time)]-valueprev);
      valueprev = shapes[shape,29+(16*(time-1))];
      xrotate = valueprev+factor*(shapes[shape,29+(16*time)]-valueprev);
      break;
    }
    if framenext == frame
    {
      alpha = shapes[shape,18+(16*time)];
      zpos = shapes[shape,21+(16*time)];
      xwidth = 0.5*shapes[shape,22+(16*time)];
      ywidth = 0.5*shapes[shape,23+(16*time)];
      zwidth = shapes[shape,24+(16*time)];
      zangle = shapes[shape,27+(16*time)];
      xrotate = shapes[shape,29+(16*time)];
      break;
    }
  }
  if time == shapes[shape,8]+1
  {
    alpha = shapes[shape,18+(16*(time-1))];
    zpos = shapes[shape,21+(16*(time-1))];
    xwidth = 0.5*shapes[shape,22+(16*(time-1))];
    ywidth = 0.5*shapes[shape,23+(16*(time-1))];
    zwidth = shapes[shape,24+(16*(time-1))];
    zangle = shapes[shape,27+(16*(time-1))];
    xrotate = shapes[shape,29+(16*(time-1))];
  }
  draw_set_color(c_white);
  draw_set_alpha(alpha);
  d3d_transform_set_identity();
  d3d_transform_add_translation(0,0,-zwidth/2);
  d3d_transform_add_rotation_x(xrotate);
  d3d_transform_add_translation(0,0,zwidth/2);
  d3d_transform_add_rotation_z(zangle);
  d3d_transform_add_translation(0,0,zpos);
  d3d_transform_add_rotation_z(direction);
  d3d_transform_add_translation(x,y,z);
  switch (shapes[shape,1])
  {
    case 1: d3d_draw_wall(-xwidth,0,zwidth,xwidth,0,0,tex,shapes[shape,14],shapes[shape,15]); break;
    case 2: d3d_primitive_begin_texture(pr_trianglelist,tex);
            d3d_vertex_normal_texture(0,0,zwidth,0,1,0,0.5*shapes[shape,14],0);
            d3d_vertex_normal_texture(-xwidth,0,0,0,1,0,0,shapes[shape,15]);
            d3d_vertex_normal_texture(xwidth,0,0,0,1,0,shapes[shape,14],shapes[shape,15]);
            d3d_primitive_end(); break;
    case 3: d3d_draw_block(-xwidth,-ywidth,zwidth,xwidth,ywidth,0,tex,shapes[shape,14],shapes[shape,15]); break;
    case 4: d3d_draw_cylinder(-xwidth,-ywidth,zwidth,xwidth,ywidth,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,6],shapes[shape,7]); break;
    case 5: d3d_draw_ellipsoid(-xwidth,-ywidth,zwidth,xwidth,ywidth,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,7]); break;
    case 6: d3d_draw_cone(-xwidth,-ywidth,zwidth,xwidth,ywidth,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,6],shapes[shape,7]); break;
  }
  d3d_transform_set_identity();
}
draw_set_color(curcolor);
draw_set_alpha(curalpha);
// end draw event code
}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

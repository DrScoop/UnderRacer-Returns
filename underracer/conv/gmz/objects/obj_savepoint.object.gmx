<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_savepoint_col</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_col_basic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>setplayerpos=true
global.cmpn_room=room
image_speed=0.2
// Place this code in the create event of your 3d object
// To play your animation set playnanim variable to true
version   =  1.68; // 3d Animator version
z         = 0;     // z position (elevation) of your animation
playanim  = true; // to play: make this variable true
loopanim  = true; // loop animation or not
playdir   = 1;     // play direction: 1 = forward, -1 = backward
playbf    = false; // play back and forth or not
animspeed = 0.25;     // speed animation which you've specified
maxframe  = 9;    // maximum frame-1 which you've set
frame     = 0;     // frame counter
maxshape  = 6;     // number of shapes-1
// shape all
shapes[0,0] = 0;
shapes[0,1] = 0;
shapes[0,2] = "all";
shapes[0,3] = 0;
shapes[0,4] = "";
shapes[0,5] = -1;
shapes[0,6] = 0;
shapes[0,7] = 0;
shapes[0,8] = 2;
shapes[0,9] = 0;
shapes[0,10] = 0;
shapes[0,11] = 0;
shapes[0,13] = 0;
shapes[0,14] = 1;
shapes[0,15] = 1;
// time array for shape all
shapes[0,16] = 0;
shapes[0,17] = 16777215;
shapes[0,18] = 1;
shapes[0,19] = 0;
shapes[0,20] = 0;
shapes[0,21] = 0;
shapes[0,22] = 2;
shapes[0,23] = 2;
shapes[0,24] = 2;
shapes[0,25] = 0;
shapes[0,26] = 0;
shapes[0,27] = 0;
shapes[0,28] = 0;
shapes[0,29] = 0;
shapes[0,30] = 0;
shapes[0,31] = 0;
shapes[0,32] = 4;
shapes[0,33] = 16777215;
shapes[0,34] = 1;
shapes[0,35] = 0;
shapes[0,36] = 0;
shapes[0,37] = 1;
shapes[0,38] = 1.50;
shapes[0,39] = 1.50;
shapes[0,40] = 1.50;
shapes[0,41] = 0;
shapes[0,42] = 0;
shapes[0,43] = 0;
shapes[0,44] = 0;
shapes[0,45] = 0;
shapes[0,46] = 0;
shapes[0,47] = 0;
shapes[0,48] = 9;
shapes[0,49] = 16777215;
shapes[0,50] = 1;
shapes[0,51] = 0;
shapes[0,52] = 0;
shapes[0,53] = 0;
shapes[0,54] = 2;
shapes[0,55] = 2;
shapes[0,56] = 2;
shapes[0,57] = 0;
shapes[0,58] = 0;
shapes[0,59] = 0;
shapes[0,60] = 0;
shapes[0,61] = 0;
shapes[0,62] = 0;
shapes[0,63] = 0;
// shape shape 1
shapes[1,0] = 1;
shapes[1,1] = 6;
shapes[1,2] = "shape 1";
shapes[1,3] = 0;
shapes[1,4] = "";
shapes[1,5] = -1;
shapes[1,6] = 1;
shapes[1,7] = 8;
shapes[1,8] = 0;
shapes[1,9] = 0;
shapes[1,10] = 0;
shapes[1,11] = 0;
shapes[1,13] = 0;
shapes[1,14] = 1;
shapes[1,15] = 1;
// time array for shape shape 1
shapes[1,16] = 0;
shapes[1,17] = 65535;
shapes[1,18] = 1;
shapes[1,19] = 0;
shapes[1,20] = -2.35;
shapes[1,21] = 2.50;
shapes[1,22] = 2;
shapes[1,23] = 2;
shapes[1,24] = 5;
shapes[1,25] = 0;
shapes[1,26] = 0;
shapes[1,27] = 0;
shapes[1,28] = 0;
shapes[1,29] = 90;
shapes[1,30] = 0;
shapes[1,31] = 0;
// shape shape 2
shapes[2,0] = 3;
shapes[2,1] = 6;
shapes[2,2] = "shape 2";
shapes[2,3] = 0;
shapes[2,4] = "";
shapes[2,5] = -1;
shapes[2,6] = 1;
shapes[2,7] = 8;
shapes[2,8] = 0;
shapes[2,9] = 0;
shapes[2,10] = 0;
shapes[2,11] = 0;
shapes[2,13] = 0;
shapes[2,14] = 1;
shapes[2,15] = 1;
// time array for shape shape 2
shapes[2,16] = 0;
shapes[2,17] = 65535;
shapes[2,18] = 1;
shapes[2,19] = 0;
shapes[2,20] = 2.35;
shapes[2,21] = 2.50;
shapes[2,22] = 2;
shapes[2,23] = 2;
shapes[2,24] = 5;
shapes[2,25] = 0;
shapes[2,26] = 0;
shapes[2,27] = 180;
shapes[2,28] = 0;
shapes[2,29] = 90;
shapes[2,30] = 0;
shapes[2,31] = 0;
// shape shape 3
shapes[3,0] = 4;
shapes[3,1] = 6;
shapes[3,2] = "shape 3";
shapes[3,3] = 0;
shapes[3,4] = "";
shapes[3,5] = -1;
shapes[3,6] = 1;
shapes[3,7] = 8;
shapes[3,8] = 0;
shapes[3,9] = 0;
shapes[3,10] = 0;
shapes[3,11] = 0;
shapes[3,13] = 0;
shapes[3,14] = 1;
shapes[3,15] = 1;
// time array for shape shape 3
shapes[3,16] = 0;
shapes[3,17] = 65535;
shapes[3,18] = 1;
shapes[3,19] = -2.35;
shapes[3,20] = 0;
shapes[3,21] = 2.50;
shapes[3,22] = 2;
shapes[3,23] = 2;
shapes[3,24] = 5;
shapes[3,25] = 0;
shapes[3,26] = 0;
shapes[3,27] = 90;
shapes[3,28] = 0;
shapes[3,29] = 90;
shapes[3,30] = 0;
shapes[3,31] = 0;
// shape shape 4
shapes[4,0] = 5;
shapes[4,1] = 6;
shapes[4,2] = "shape 4";
shapes[4,3] = 0;
shapes[4,4] = "";
shapes[4,5] = -1;
shapes[4,6] = 1;
shapes[4,7] = 8;
shapes[4,8] = 0;
shapes[4,9] = 0;
shapes[4,10] = 0;
shapes[4,11] = 0;
shapes[4,13] = 0;
shapes[4,14] = 1;
shapes[4,15] = 1;
// time array for shape shape 4
shapes[4,16] = 0;
shapes[4,17] = 65535;
shapes[4,18] = 1;
shapes[4,19] = 2.35;
shapes[4,20] = 0;
shapes[4,21] = 2.50;
shapes[4,22] = 2;
shapes[4,23] = 2;
shapes[4,24] = 5;
shapes[4,25] = 0;
shapes[4,26] = 0;
shapes[4,27] = 270;
shapes[4,28] = 0;
shapes[4,29] = 90;
shapes[4,30] = 0;
shapes[4,31] = 0;
// shape shape 5
shapes[5,0] = 6;
shapes[5,1] = 6;
shapes[5,2] = "shape 5";
shapes[5,3] = 0;
shapes[5,4] = "";
shapes[5,5] = -1;
shapes[5,6] = 1;
shapes[5,7] = 8;
shapes[5,8] = 0;
shapes[5,9] = 0;
shapes[5,10] = 0;
shapes[5,11] = 0;
shapes[5,13] = 0;
shapes[5,14] = 1;
shapes[5,15] = 1;
// time array for shape shape 5
shapes[5,16] = 0;
shapes[5,17] = 65535;
shapes[5,18] = 1;
shapes[5,19] = 0;
shapes[5,20] = 0;
shapes[5,21] = 0;
shapes[5,22] = 2;
shapes[5,23] = 2;
shapes[5,24] = 5;
shapes[5,25] = 0;
shapes[5,26] = 0;
shapes[5,27] = 270;
shapes[5,28] = 0;
shapes[5,29] = 0;
shapes[5,30] = 0;
shapes[5,31] = 0;
// shape shape 6
shapes[6,0] = 7;
shapes[6,1] = 6;
shapes[6,2] = "shape 6";
shapes[6,3] = 0;
shapes[6,4] = "";
shapes[6,5] = -1;
shapes[6,6] = 1;
shapes[6,7] = 8;
shapes[6,8] = 0;
shapes[6,9] = 0;
shapes[6,10] = 0;
shapes[6,11] = 0;
shapes[6,13] = 0;
shapes[6,14] = 1;
shapes[6,15] = 1;
// time array for shape shape 6
shapes[6,16] = 0;
shapes[6,17] = 65535;
shapes[6,18] = 1;
shapes[6,19] = 0;
shapes[6,20] = 0;
shapes[6,21] = 5;
shapes[6,22] = 2;
shapes[6,23] = 2;
shapes[6,24] = 5;
shapes[6,25] = 0;
shapes[6,26] = 0;
shapes[6,27] = 270;
shapes[6,28] = 0;
shapes[6,29] = 180;
shapes[6,30] = 0;
shapes[6,31] = 0;
// end create event code
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if setplayerpos=true{
if instance_exists(obj_kart_frisk){
obj_kart_frisk.x=global.cmpn_posx
obj_kart_frisk.y=global.cmpn_posy
obj_kart_frisk.direction=global.cmpn_dir
setplayerpos=false
}}

direction+=0.5
if direction&gt;360{direction=0}

if distance_to_object(obj_kart_frisk)&lt;10{

if keyboard_check_pressed(global.control_pl1use_kb){
if other.player=1{
if !instance_exists(obj_hud_save){
instance_create(x,y,obj_hud_save)
global.dialogue=true
}}}

if gamepad_check_button_pressed(1,global.control_pl1use_jk){
if other.player=1{
if !instance_exists(obj_hud_save){
instance_create(x,y,obj_hud_save)
global.dialogue=true
}}}

}

// Place this code in the step event of your 3d object
if playdir == 1
{
  if loopanim
  {
    if playanim
    {
      if frame == maxframe
      {
        if playbf playdir = -1;
        else frame = 0;
      }
      else frame = min(maxframe,frame+animspeed);
    }
  }
  else
  {
    if playanim frame = min(maxframe,frame+animspeed);
    if frame == maxframe
    {
      if playbf playdir = -1;
      else playanim = false;
    }
  }
}
else
{
  if loopanim
  {
    if playanim
    {
      if frame == 0
      {
        if playbf playdir = 1;
        else frame = maxframe;
      }
      else frame = max(0,frame-animspeed);
    }
  }
  else
  {
    if playanim frame = max(0,frame-animspeed);
    if frame == 0 
    {
      if playbf playdir = 1;
      playanim = false;
    }
  }
}
// end step event code
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_kart_basic">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.player=1{
if !instance_exists(obj_hud_save){
global.cmpn_posx=obj_kart_frisk.x
global.cmpn_posy=obj_kart_frisk.y
global.cmpn_dir=obj_kart_frisk.direction
global.dialogue=true
instance_create(x,y,obj_hud_save)
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Place this code in the draw event of your 3d object
var curcolor,curalpha,name,time,factor,frameprev,framenext,valueprev,zgpos,xscale,yscale,zscale,shape,tex,color,xpos,ypos,zpos,xwidth,ywidth,zwidth,zangle,xrotate;
curcolor = draw_get_color();
curalpha = draw_get_alpha();
for (time=0;time&lt;=shapes[0,8];time+=1)
{
  framenext = shapes[0,16+(16*time)];
  if framenext &gt; frame
  {
    frameprev = shapes[0,16+(16*(time-1))];
    factor = (frame-frameprev)/(framenext-frameprev);
    valueprev = shapes[0,21+(16*(time-1))];
    zgpos = valueprev+factor*(shapes[0,21+(16*time)]-valueprev);
    valueprev = shapes[0,22+(16*(time-1))];
    xscale = valueprev+factor*(shapes[0,22+(16*time)]-valueprev);
    valueprev = shapes[0,23+(16*(time-1))];
    yscale = valueprev+factor*(shapes[0,23+(16*time)]-valueprev);
    valueprev = shapes[0,24+(16*(time-1))];
    zscale = valueprev+factor*(shapes[0,24+(16*time)]-valueprev);
    break;
  }
  if framenext == frame
  {
    zgpos = shapes[0,21+(16*time)];
    xscale = shapes[0,22+(16*time)];
    yscale = shapes[0,23+(16*time)];
    zscale = shapes[0,24+(16*time)];
    break;
  }
}
if time == shapes[0,8]+1
{
  zgpos = shapes[0,21+(16*(time-1))];
  xscale = shapes[0,22+(16*(time-1))];
  yscale = shapes[0,23+(16*(time-1))];
  zscale = shapes[0,24+(16*(time-1))];
}
for (shape=1;shape&lt;=maxshape;shape+=1) if !shapes[shape,3]
{
  tex = -1;
  if shapes[shape,5] != -1
  {
    if shapes[shape,9] == 0 tex = background_get_texture(shapes[shape,5]);
    else tex = sprite_get_texture(shapes[shape,5],floor((frame mod shapes[shape,10])*sprite_get_number(shapes[shape,5])/shapes[shape,10]));
  }
  else if shapes[0,5] != -1
  {
    if shapes[0,9] == 0 tex = background_get_texture(shapes[0,5]);
    else tex = sprite_get_texture(shapes[0,5],floor((frame mod shapes[0,10])*sprite_get_number(shapes[0,5])/shapes[0,10]));
  }
  name = 'T'+string(shapes[shape,0]);
  for (time=0;time&lt;=shapes[shape,8];time+=1)
  {
    framenext = shapes[shape,16+(16*time)];
    if framenext &gt; frame
    {
      frameprev = shapes[shape,16+(16*(time-1))];
      factor = (frame-frameprev)/(framenext-frameprev);
      color = merge_color(shapes[shape,17+(16*(time-1))],shapes[shape,17+(16*time)],factor);
      valueprev = shapes[shape,19+(16*(time-1))];
      xpos = valueprev+factor*(shapes[shape,19+(16*time)]-valueprev);
      valueprev = shapes[shape,20+(16*(time-1))];
      ypos = valueprev+factor*(shapes[shape,20+(16*time)]-valueprev);
      valueprev = shapes[shape,21+(16*(time-1))];
      zpos = valueprev+factor*(shapes[shape,21+(16*time)]-valueprev);
      valueprev = shapes[shape,22+(16*(time-1))];
      xwidth = 0.5*(valueprev+factor*(shapes[shape,22+(16*time)]-valueprev));
      valueprev = shapes[shape,23+(16*(time-1))];
      ywidth = 0.5*(valueprev+factor*(shapes[shape,23+(16*time)]-valueprev));
      valueprev = shapes[shape,24+(16*(time-1))];
      zwidth = valueprev+factor*(shapes[shape,24+(16*time)]-valueprev);
      valueprev = shapes[shape,27+(16*(time-1))];
      zangle = valueprev+factor*(shapes[shape,27+(16*time)]-valueprev);
      valueprev = shapes[shape,29+(16*(time-1))];
      xrotate = valueprev+factor*(shapes[shape,29+(16*time)]-valueprev);
      break;
    }
    if framenext == frame
    {
      color = shapes[shape,17+(16*time)];
      xpos = shapes[shape,19+(16*time)];
      ypos = shapes[shape,20+(16*time)];
      zpos = shapes[shape,21+(16*time)];
      xwidth = 0.5*shapes[shape,22+(16*time)];
      ywidth = 0.5*shapes[shape,23+(16*time)];
      zwidth = shapes[shape,24+(16*time)];
      zangle = shapes[shape,27+(16*time)];
      xrotate = shapes[shape,29+(16*time)];
      break;
    }
  }
  if time == shapes[shape,8]+1
  {
    color = shapes[shape,17+(16*(time-1))];
    xpos = shapes[shape,19+(16*(time-1))];
    ypos = shapes[shape,20+(16*(time-1))];
    zpos = shapes[shape,21+(16*(time-1))];
    xwidth = 0.5*shapes[shape,22+(16*(time-1))];
    ywidth = 0.5*shapes[shape,23+(16*(time-1))];
    zwidth = shapes[shape,24+(16*(time-1))];
    zangle = shapes[shape,27+(16*(time-1))];
    xrotate = shapes[shape,29+(16*(time-1))];
  }
  draw_set_color(color);
  draw_set_alpha(1);
  d3d_transform_set_identity();
  d3d_transform_add_translation(0,0,-zwidth*zscale/2);
  d3d_transform_add_rotation_x(xrotate);
  d3d_transform_add_translation(0,0,zwidth*zscale/2);
  d3d_transform_add_rotation_z(zangle);
  d3d_transform_add_translation(xpos*xscale,ypos*yscale,zpos*zscale);
  d3d_transform_add_translation(0*xscale,0*yscale,zgpos*zscale);
  d3d_transform_add_rotation_z(direction);
  d3d_transform_add_translation(x,y,z);
  switch (shapes[shape,1])
  {
    case 1: d3d_draw_wall(-xwidth*xscale,0,zwidth*zscale,xwidth*xscale,0,0,tex,shapes[shape,14],shapes[shape,15]); break;
    case 2: d3d_primitive_begin_texture(pr_trianglelist,tex);
            d3d_vertex_normal_texture(0,0,zwidth*zscale,0,1,0,0.5*shapes[shape,14],0);
            d3d_vertex_normal_texture(-xwidth*xscale,0,0,0,1,0,0,shapes[shape,15]);
            d3d_vertex_normal_texture(xwidth*xscale,0,0,0,1,0,shapes[shape,14],shapes[shape,15]);
            d3d_primitive_end(); break;
    case 3: d3d_draw_block(-xwidth*xscale,-ywidth*yscale,zwidth*zscale,xwidth*xscale,ywidth*yscale,0,tex,shapes[shape,14],shapes[shape,15]); break;
    case 4: d3d_draw_cylinder(-xwidth*xscale,-ywidth*yscale,zwidth*zscale,xwidth*xscale,ywidth*yscale,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,6],shapes[shape,7]); break;
    case 5: d3d_draw_ellipsoid(-xwidth*xscale,-ywidth*yscale,zwidth*zscale,xwidth*xscale,ywidth*yscale,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,7]); break;
    case 6: d3d_draw_cone(-xwidth*xscale,-ywidth*yscale,zwidth*zscale,xwidth*xscale,ywidth*yscale,0,tex,shapes[shape,14],shapes[shape,15],shapes[shape,6],shapes[shape,7]); break;
  }
  d3d_transform_set_identity();
}
draw_set_color(curcolor);
draw_set_alpha(curalpha);
// end draw event code
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
